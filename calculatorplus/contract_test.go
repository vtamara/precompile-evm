// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package calculatorplus

import (
	"crypto/rand"
	"math/big"
	"testing"

	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/testutils"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

var (
	_ = vmerrs.ErrOutOfGas
	_ = big.NewInt
	_ = common.Big0
	_ = require.New
)

// These tests are run against the precompile contract directly with
// the given input and expected output. They're just a guide to
// help you write your own tests. These tests are for general cases like
// allowlist, readOnly behaviour, and gas cost. You should write your own
// tests for specific cases.
var (
	// 11/4
	expectedModuloPlusOutcome, _ = PackModuloPlusOutput(ModuloPlusOutput{big.NewInt(2), big.NewInt(3)}) 
	// 11/0
	expectedModuloPlusDiv0Outcome, _ = PackModuloPlusOutput(ModuloPlusOutput{big.NewInt(0), big.NewInt(0)}) 
	// 2
	expectedPowOfThreeOutcome, _  = PackPowOfThreeOutput(PowOfThreeOutput{big.NewInt(4), big.NewInt(8), big.NewInt(16)})
	// 12/16
	expectedSimplFracOutcome, _       = PackSimplFracOutput(SimplFracOutput{big.NewInt(3), big.NewInt(4)})
	// 12/0
	expectedSimplFracDen0Outcome, _       = PackSimplFracOutput(SimplFracOutput{big.NewInt(0), big.NewInt(0)})

	tests = map[string]testutils.PrecompileTest{
		"insufficient gas for moduloPlus should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := ModuloPlusInput{big.NewInt(1), big.NewInt(3)}
				input, err := PackModuloPlus(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ModuloPlusGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for powOfThree should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput *big.Int
				testInput = new(big.Int)
				input, err := PackPowOfThree(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: PowOfThreeGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for simplFrac should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := SimplFracInput{big.NewInt(1), big.NewInt(1)}
				input, err := PackSimplFrac(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SimplFracGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"testing moduloPlus": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				dividend := big.NewInt(11)
				divisor := big.NewInt(4)
				testInput :=  ModuloPlusInput{dividend, divisor}
				input, err := PackModuloPlus(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ModuloPlusGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedModuloPlusOutcome,
		},
		"testing moduloPlus divisor 0": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				dividend := big.NewInt(11)
				divisor := big.NewInt(0)
				testInput :=  ModuloPlusInput{dividend, divisor}
				input, err := PackModuloPlus(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: ModuloPlusGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedModuloPlusDiv0Outcome,
		},

		"testing powOfThree": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				testInput := big.NewInt(2)
				input, err := PackPowOfThree(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: PowOfThreeGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedPowOfThreeOutcome,
		},
		"testing simplFrac": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				numerator := big.NewInt(12)
				denominator := big.NewInt(16)
				input, err := PackSimplFrac(SimplFracInput{numerator, denominator})
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SimplFracGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedSimplFracOutcome,
		},
		"testing simplFrac den 0": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				numerator := big.NewInt(12)
				denominator := big.NewInt(0)
				input, err := PackSimplFrac(SimplFracInput{numerator, denominator})
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SimplFracGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedSimplFracDen0Outcome,
		},

	}
)

// TestCalculatorplusRun tests the Run function of the precompile contract.
func TestCalculatorplusRun(t *testing.T) {

	// Run tests.
	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			test.Run(t, Module, state.NewTestStateDB(t))
		})
	}

	N := 1_000
	n := new(big.Int).Exp(big.NewInt(2), big.NewInt(int64(128)), nil)

	// Fuzzing N times
	for i := 0; i < N; i++ {
		quotient, err := rand.Int(rand.Reader, n)
		remainder, err := rand.Int(rand.Reader, n)
		divisor, err := rand.Int(rand.Reader, n)
		if remainder.Cmp(divisor) >= 0 {
			remainder = big.NewInt(0).Sub(divisor, big.NewInt(1))
		} 
		
		// Expected outcome for ModuloPlus
		dividend := big.NewInt(0).Add(big.NewInt(0).Mul(quotient, divisor), remainder)
		expectedRandOutcome, _ := PackModuloPlusOutput(ModuloPlusOutput{quotient, remainder}) 
		randModuloPlusInput := ModuloPlusInput{dividend, divisor}
		randInput, err := PackModuloPlus(randModuloPlusInput)
		require.NoError(t, err)
		randTest := testutils.PrecompileTest{
			Caller:      common.Address{1},
			Input:       randInput,
			SuppliedGas: ModuloPlusGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedRandOutcome,
		}
		t.Run("Testing random moduloPlus!", func(t *testing.T) {
			randTest.Run(t, Module, state.NewTestStateDB(t))
		})

		// Expected outcome for powThreee using remainder as base
		r2 := big.NewInt(0).Mul(remainder, remainder)
		r3 := big.NewInt(0).Mul(remainder, r2)
		r4 := big.NewInt(0).Mul(remainder, r3)
	  expectedRandOutcome, _  = PackPowOfThreeOutput(PowOfThreeOutput{r2, r3, r4})
		randInput, err = PackPowOfThree(remainder)
		require.NoError(t, err)
		randTest = testutils.PrecompileTest{
			Caller:      common.Address{1},
			Input:       randInput,
			SuppliedGas: PowOfThreeGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedRandOutcome,
		}
		t.Run("Testing random powOfThree!", func(t *testing.T) {
			randTest.Run(t, Module, state.NewTestStateDB(t))
		})

		// Expected outcome for simplFrac using remainder as gcd and adjusintg
		// divisor and dividend to become primes
		gcd := remainder
		pn := divisor 
		for ; !pn.ProbablyPrime(20); pn.Add(pn,big.NewInt(1)) {
		}
		pd := dividend
		for  ;!pd.ProbablyPrime(20); pd.Add(pd,big.NewInt(1)) {
		}
		pd = big.NewInt(7) // Problematic to use big prime
		num := big.NewInt(0).Mul(pn, gcd)
		den := big.NewInt(0).Mul(pd, gcd) 
	  expectedRandOutcome, _  = PackSimplFracOutput(SimplFracOutput{pn, pd})
		randInput, err = PackSimplFrac(SimplFracInput{num, den})
		require.NoError(t, err)
		randTest = testutils.PrecompileTest{
			Caller:      common.Address{1},
			Input:       randInput,
			SuppliedGas: SimplFracGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedRandOutcome,
		}
		t.Run("Testing random simplFrac!", func(t *testing.T) {
			randTest.Run(t, Module, state.NewTestStateDB(t))
		})


	}

}

func BenchmarkCalculatorplus(b *testing.B) {
	// Benchmark tests.
	for name, test := range tests {
		b.Run(name, func(b *testing.B) {
			test.Bench(b, Module, state.NewTestStateDB(b))
		})
	}
}
